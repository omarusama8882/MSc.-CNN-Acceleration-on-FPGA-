`timescale 1ns / 1ps
module DenseLayer_testbench;
reg signed [4095:0]  inputs;
reg clk;
reg rst;
wire[2:0] class;
DenseLayer uut(
.inputs(inputs),
.clk(clk),
.rst(rst),
.class(class)
);
localparam SF=2.0**-8.0;
integer i;
initial begin
clk=0;
rst=0;
inputs=4096'b
forever #5 clk=~clk;


end
always@(inputs) begin
$display("Time: %0d | inputs:", $time);

for(i=0;i<256;i=i+1) begin
$display("inputs[%d]=%f",i, inputs[16*i+:16]*SF);
end
end
always@(uut.bias) begin
$display("Time: %0d | outputs:", $time);

for(i=0;i<4;i=i+1) begin
$display("bias[%d]=%f",i, uut.bias[i]);

end
end
always@(uut.outputs) begin
$display("Time: %0d | outputs:", $time);
$display("outputs=%h",uut.outputs);
for (i = 0; i < 4; i = i + 1) begin
$display("outputs[%d]=%f",i, uut.outputs[30*i+:30]*SF);
end
end
always@(uut.bitshifted) begin
$display("Time: %0d | level1 values:", $time);

for (i = 0; i < 256; i = i + 1) begin
$display("%f", uut.bitshifted[22*i+:22]*SF);

end

end

always@(uut.currmem) begin
$display("Time: %0d | level1 values:", $time);

for (i = 0; i < 256; i = i + 1) begin
$display("mem[%d]=%d",i, uut.currmem[i]);

end
end
always@(uut.currResult) begin
$display("Time: %0d | Result values:", $time);
$display("currResult=%f", uut.currResult*SF);
end
always@(uut.output_counter) begin
$display("Time: %0d | outputcounter values:", $time);
$display("outputcounter=%d",uut.output_counter);
end
always@(uut.finish) begin
$display("Time: %0d | finish:", $time);
$display("finish=%d",uut.finish);
end

endmodule

