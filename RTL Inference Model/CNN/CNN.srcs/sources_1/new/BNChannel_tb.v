`timescale 1ns / 1ps
module BNChannel_tb;
reg clk;
reg rst;
reg signed[15:0] gvc;
reg signed [15:0] gmbvc;
reg signed [15:0] mean;
reg signed [(5*5*16)-1:0] map;
wire signed [(5*5*16)-1:0] outmap;
localparam SF1=2.0**-11.0;
localparam SF2=2.0**-16.0;
localparam SF3=2.0**-27.0;
localparam SF=2.0**-8.0;

integer i;


BN_Channel uut(
.clk(clk),
.rst(rst),
.gmbvc(gmbvc),
.gvc(gvc),
.map(map),
.outmap(outmap)
);
always 
#5 clk=~clk;

initial begin
/*
 clk=1'b0;
 gmbvc=16'b1111010000000000;
 gvc=16'b0010001100000000;
 map=400'b000000110000000000001000110000000000001100000000000010001100000000000011000000000000100011000000000000110000000000001000110000000000001100000000000010001100000000000011000000000000100011000000000000110000000000001000110000000000001100000000000010001100000000000011000000000000100011000000000000110000000000001000110000000000001100000000000010001100000000000011000000000000100011000000000000110000000;
 #60
  gvc=16'b01111111000000000;
  map=400'b0111111110000000011001000110001001111111100000000110010001100010011111111000000001100100011000100111111110000000011001000110001001111111100000000110010001100010011111111000000001100100011000100111111110000000011001000110001001111111100000000110010001100010011111111000000001100100011000100111111110000000011001000110001001111111100000000110010001100010011111111000000001100100011000100111111110000000;
  gmbvc=16'b1000010011111111;
  */
  
  clk=1'b0;
  rst=1'b0;
   gmbvc=16'b1111111010000000;
   gvc=16'b0000000110000000;
   map=400'b0000000110000000000001000110000000000001100000000000010001100000000000011000000000000100011000000000000110000000000001000110000000000001100000000000010001100000000000011000000000000100011000000000000110000000000001000110000000000001100000000000010001100000000000011000000000000100011000000000000110000000000001000110000000000001100000000000010001100000000000011000000000000100011000000000000110000000;
   #60
     gvc=16'b0000111101100001;
     map=400'b0111111110000000011001000110001001111111100000000110010001100010011111111000000001100100011000100111111110000000011001000110001001111111100000000110010001100010011111111000000001100100011000100111111110000000011001000110001001111111100000000110010001100010011111111000000001100100011000100111111110000000011001000110001001111111100000000110010001100010011111111000000001100100011000100111111110000000;
     gmbvc=16'b1111111011001111;
   #60
   map=400'b1111101101000000111110110100000011111011010000001111101101000000111110110100000011111011010000001111101101000000111110110100000011111011010000001111101101000000111110110100000011111011010000001111101101000000111110110100000011111011010000001111101101000000111110110100000011111011010000001111101101000000111110110100000011111011010000001111101101000000111110110100000011111011010000001111101101000000;
   
 //  forever #5 clk=~clk;

  
  end



always@(gvc) begin
$display("Time: %0d | Result values:", $time);
$display("gvc=%f", gvc*SF);
end
always@(gmbvc) begin
$display("Time: %0d | Result values:", $time);
$display("gmbvc=%f", gmbvc*SF);
end
always@(uut.currval) begin
$display("Time: %0d | Result values:", $time);
$display("currvaL=%f", uut.currval*SF);
end

always@(uut.rowcounter) begin

$display("Time: %0d | Result values:", $time);
$display("rowcount=%d", uut.rowcounter);
end
always@(uut.out1) begin
$display("Time: %0d | Result values:", $time);
$display("out1=%f", uut.out1*SF2);
$display("out1=%b",uut.out1);
end
always@(uut.outmodified) begin
$display("Time: %0d | Result values:", $time);
$display("outmod=%f", uut.outmodified*SF);
$display("outmod=%b", uut.outmodified);

end
always@(uut.outsimplified) begin
$display("Time: %0d | Result values:", $time);
$display("outsimp=%f", uut.outsimplified*SF);
$display("outsimp=%b", uut.outsimplified);

end
always@(map) begin
$display("Time: %0d | Result values:", $time);
for(i=0;i<25;i=i+1) begin
$display("map[%d]=%f",i,map[16*i+:16]*SF);
end

end
always@(uut.newval) begin
$display("Time: %0d | Result values:", $time);
$display("newval=%f", uut.newval*SF);

end
always@(outmap) begin
$display("Time: %0d | Result values:", $time);
for(i=0;i<25;i=i+1) begin
$display("outmap[%d]=%f",i,outmap[16*i+:16]*SF);
end
end









endmodule
